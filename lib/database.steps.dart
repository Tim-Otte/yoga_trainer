// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    bodyParts,
    poses,
    workouts,
    workoutPoses,
  ];
  late final Shape0 bodyParts = Shape0(
    source: i0.VersionedTable(
      entityName: 'body_parts',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_1],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 poses = Shape1(
    source: i0.VersionedTable(
      entityName: 'poses',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 workouts = Shape2(
    source: i0.VersionedTable(
      entityName: 'workouts',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_1, _column_2],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 workoutPoses = Shape3(
    source: i0.VersionedTable(
      entityName: 'workout_poses',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_8, _column_9, _column_10, _column_11, _column_12],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_0(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'id',
      aliasedName,
      false,
      hasAutoIncrement: true,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'PRIMARY KEY AUTOINCREMENT',
      ),
    );
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'name',
      aliasedName,
      false,
      additionalChecks: i1.GeneratedColumn.checkTextLength(
        minTextLength: 1,
        maxTextLength: 100,
      ),
      type: i1.DriftSqlType.string,
    );

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get duration =>
      columnsByName['duration']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get difficulty =>
      columnsByName['difficulty']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get affectedBodyPart =>
      columnsByName['affected_body_part']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isUnilateral =>
      columnsByName['is_unilateral']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get imagePath =>
      columnsByName['image_path']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'description',
      aliasedName,
      false,
      additionalChecks: i1.GeneratedColumn.checkTextLength(maxTextLength: 250),
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_3(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'duration',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_4(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'difficulty',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_5(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'affected_body_part',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES body_parts (id)',
      ),
    );
i1.GeneratedColumn<bool> _column_6(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_unilateral',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_unilateral" IN (0, 1))',
      ),
    );
i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'image_path',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
}

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get workout =>
      columnsByName['workout']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get pose =>
      columnsByName['pose']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get order =>
      columnsByName['order']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get side =>
      columnsByName['side']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get prepTime =>
      columnsByName['prep_time']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_8(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'workout',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES workouts (id)',
      ),
    );
i1.GeneratedColumn<int> _column_9(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'pose',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES poses (id)',
      ),
    );
i1.GeneratedColumn<int> _column_10(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'order',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_11(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'side',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_12(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'prep_time',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
    );

final class Schema3 extends i0.VersionedSchema {
  Schema3({required super.database}) : super(version: 3);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    bodyParts,
    poses,
    workouts,
    workoutPoses,
  ];
  late final Shape0 bodyParts = Shape0(
    source: i0.VersionedTable(
      entityName: 'body_parts',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_1],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 poses = Shape1(
    source: i0.VersionedTable(
      entityName: 'poses',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 workouts = Shape2(
    source: i0.VersionedTable(
      entityName: 'workouts',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_1, _column_2],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 workoutPoses = Shape3(
    source: i0.VersionedTable(
      entityName: 'workout_poses',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(workout, pose, "order")'],
      columns: [_column_8, _column_9, _column_10, _column_11, _column_12],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

final class Schema4 extends i0.VersionedSchema {
  Schema4({required super.database}) : super(version: 4);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    bodyParts,
    poses,
    workouts,
    workoutPoses,
    workoutWeekdays,
  ];
  late final Shape0 bodyParts = Shape0(
    source: i0.VersionedTable(
      entityName: 'body_parts',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_1],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 poses = Shape1(
    source: i0.VersionedTable(
      entityName: 'poses',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 workouts = Shape2(
    source: i0.VersionedTable(
      entityName: 'workouts',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [_column_0, _column_1, _column_2],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 workoutPoses = Shape3(
    source: i0.VersionedTable(
      entityName: 'workout_poses',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(workout, pose, "order")'],
      columns: [_column_8, _column_9, _column_10, _column_11, _column_12],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape4 workoutWeekdays = Shape4(
    source: i0.VersionedTable(
      entityName: 'workout_weekdays',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(workout, weekday)'],
      columns: [_column_8, _column_13],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get workout =>
      columnsByName['workout']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get weekday =>
      columnsByName['weekday']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_13(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'weekday',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      case 2:
        final schema = Schema3(database: database);
        final migrator = i1.Migrator(database, schema);
        await from2To3(migrator, schema);
        return 3;
      case 3:
        final schema = Schema4(database: database);
        final migrator = i1.Migrator(database, schema);
        await from3To4(migrator, schema);
        return 4;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
}) => i0.VersionedSchema.stepByStepHelper(
  step: migrationSteps(
    from1To2: from1To2,
    from2To3: from2To3,
    from3To4: from3To4,
  ),
);
